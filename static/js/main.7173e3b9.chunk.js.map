{"version":3,"sources":["components/navBar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","totalCounters","Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","styles","fontSize","fontWeight","fontSW","meaningClick","setState","prevState","meaningOfLife","console","log","state","classes","counterObject","value","_this2","getBadgeClasses","style","formatCount","onClick","onIncrement","onDecrement","onDelete","id","Component","Counters","onReset","counters","map","counter","src_components_counter","key","App","handleReset","newCounters","newArray","handelDelete","counterID","filter","c","handelIncrement","toConsumableArray","index","indexOf","objectSpread","handelDecrement","Fragment","navBar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7173e3b9.chunk.js","sourcesContent":["import React from 'react';\n// statless functional component (function instead of class)\nconst NavBar = props =>{\n    // console.log(\"NavBar-render\")\n    return ( \n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        \n        <a className=\"navbar-brand\" href=\"#// eslint-disable-next-line \">\n           <h3>Total Items <span className=\"badge badge-pill badge-secondary\">\n                {props.totalCounters}\n            </span>\n           </h3>\n        </a>\n    </nav>\n    \n );\n};\nexport default NavBar;","import React, { Component } from 'react';\nimport './counter.css';\n// single component\nclass Counter extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            meaningOfLife: 10\n        }\n    }\n    styles = {\n        fontSize: 25,\n        fontWeight: \"bold\"\n    };\n    fontSW = {\n        fontSize: 25,\n        fontWeight: \"bold\"\n    }\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes = classes + ((this.props.counterObject.value === 0) ? \"warning\" : \"primary\");\n        return classes;\n    }\n    formatCount(){\n        const {value} = this.props.counterObject;\n        return value === 0 ? '0': value\n     }\n    // doHandleIncrement = () => {\n    //     this.handleIncrement({id: 1})\n    // }\n    meaningClick= ()=>{\n        this.setState((prevState) => {\n          return{meaningOfLife: prevState.meaningOfLife + 1}\n        },      \n          () => console.log(this.state.meaningOfLife)\n        )\n      }\n    render() { \n        // console.log(this.props)\n        // console.log(\"counter-render\")\n        let classes = this.getBadgeClasses();\n        return (\n            <div >\n                {/* <h4>Counter #{this.props.counterObject.id}</h4> */}\n                <span style = {this.styles} className = {classes} >{this.formatCount()}</span>\n\n                <button onClick = {() => this.props.onIncrement(this.props.counterObject)}\n                style = {this.fontSW} className = \"btn btn-secondary btn-sm m-1\">+\n                </button>\n                <button onClick = {() => this.props.onDecrement(this.props.counterObject)} \n                style = {this.fontSW} className = \"btn btn-secondary btn-muted m-1\">-</button>\n                <button onClick = {() => this.props.onDelete(this.props.counterObject.id)} \n                style = {this.fontSW} className = \"btn btn-danger btn-sm m-2\"> Delete\n                </button> \n                <h4>{this.state.meaningOfLife}</h4>\n                <button onClick = {this.meaningClick } className = \"btn btn-info btn-sm m-2\">Ages</button>   \n            </div>\n        );\n    };\n    \n\n}\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from \"./counter\"\n\nclass Counters extends Component {\n    render() { \n        // console.log(\"counters-render\")\n        return ( \n        <div>\n            <button onClick = {this.props.onReset} className=\"btn btn-primary btn-sm m-2\">\n                Reset\n            </button>\n            {this.props.counters.map(counter => \n            <Counter \n                key = {counter.id} \n                counterObject = {counter} \n                onDelete = {this.props.onDelete}\n                onIncrement = {this.props.onIncrement}\n                onDecrement = {this.props.onDecrement}>\n            </Counter>)} \n        </div> );\n    }\n}\nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navBar';\nimport Counters from './components/counters'\nimport './App.css';\n\nclass App extends Component {\n  state = { \n    counters: [\n        {id : 1, value: 0},\n        {id : 2, value: 0},\n        {id : 3, value: 0},\n        {id : 4, value: 0}\n    ]\n };\n handleReset = () =>{\n   const newCounters = this.state.counters.map(newArray =>{\n        newArray.value = 0;\n        return newArray;\n     });\n     this.setState({newCounters})\n }\n handelDelete = counterID => {\n    const newCounters = this.state.counters.filter(c => c.id !== counterID);\n    this.setState({counters: newCounters});\n}\nhandelIncrement = counter => {\n    const counters= [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    this.setState({counters});\n}\nhandelDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value--;\n    if(counters[index].value < 0){\n        counters[index].value = 0;\n    }\n    this.setState({counters})\n}\n  render() { \n    // console.log(\"app-render\")\n    return ( \n      <React.Fragment>\n        <NavBar totalCounters = \n          {this.state.counters.filter(newArray => newArray.value > 0).length}/>\n        <main className = 'container'>\n          <Counters \n            counters = {this.state.counters}\n            onReset = {this.handleReset}\n            onDelete = {this.handelDelete}\n            onIncrement = {this.handelIncrement}\n            onDecrement = {this.handelDecrement}\n                    />\n        </main>\n      </React.Fragment>\n     );\n  }\n} \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n// import Counters from './components/counters';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}